# Production Dockerfile for GoLangGraph Agent
FROM golang:1.21-alpine AS builder

# Set working directory
WORKDIR /app

# Install dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the binary
ARG VERSION=production
RUN CGO_ENABLED=0 GOOS=linux go build \
    -ldflags="-w -s -X main.version=${VERSION}" \
    -a -installsuffix cgo \
    -o golanggraph-agent \
    ./cmd/golanggraph

# Production stage
FROM alpine:latest

# Install ca-certificates for HTTPS requests
RUN apk --no-cache add ca-certificates tzdata

# Create non-root user
RUN addgroup -g 1001 -S golanggraph && \
    adduser -u 1001 -S golanggraph -G golanggraph

WORKDIR /app

# Copy the binary from builder stage
COPY --from=builder /app/golanggraph-agent .

# Copy configuration files
COPY configs/ ./configs/
COPY static/ ./static/

# Create necessary directories
RUN mkdir -p ./logs ./data

# Change ownership to non-root user
RUN chown -R golanggraph:golanggraph /app

# Switch to non-root user
USER golanggraph

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ./golanggraph-agent health || exit 1

# Run the agent
ENTRYPOINT ["./golanggraph-agent"]
CMD ["serve", "--host", "0.0.0.0", "--port", "8080"]
