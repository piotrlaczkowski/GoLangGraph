# GoLangGraph Stateful Ideation Agents - Local Development with Ollama
# This compose file is optimized for local development and testing with all migrated agents

version: '3.8'

services:
  # Main GoLangGraph Stateful Agents Application
  golanggraph-stateful-agents:
    build:
      context: .
      dockerfile: Dockerfile.local
    image: golanggraph/stateful-agents:local
    container_name: golanggraph-stateful-agents
    ports:
      - "8080:8080"
    environment:
      # Server Configuration
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      - API_BASE_PATH=/api

      # LLM Configuration - Ollama on host machine
      - OLLAMA_ENDPOINT=http://host.docker.internal:11434
      - DEFAULT_LLM_PROVIDER=ollama
      - DEFAULT_MODEL=llama3.2:latest

      # Database Configuration
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=golanggraph_stateful
      - POSTGRES_USER=golanggraph
      - POSTGRES_PASSWORD=stateful_password_2024
      - POSTGRES_SSL_MODE=disable

      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=

      # Vector Database (Qdrant)
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - QDRANT_API_KEY=

      # Feature Flags - Enable all for testing
      - ENABLE_WEB_UI=true
      - ENABLE_PLAYGROUND=true
      - ENABLE_METRICS=true
      - ENABLE_MONITORING=true
      - ENABLE_PERSISTENCE=true
      - ENABLE_RAG=true
      - ENABLE_VECTOR_SEARCH=true
      - ENABLE_SESSION_MGMT=true

      # Application Mode
      - GIN_MODE=debug
      - LOG_LEVEL=debug

    extra_hosts:
      # Enable connection to host machine's Ollama
      - "host.docker.internal:host-gateway"

    volumes:
      # Mount for development (optional)
      - ./logs:/app/logs

    networks:
      - stateful-agents-network

    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

    labels:
      - "com.golanggraph.service=stateful-agents"
      - "com.golanggraph.environment=local"

  # PostgreSQL Database with pgvector extension
  postgres:
    image: ankane/pgvector:latest
    container_name: golanggraph-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=golanggraph_stateful
      - POSTGRES_USER=golanggraph
      - POSTGRES_PASSWORD=stateful_password_2024
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8

    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-database.sql:/docker-entrypoint-initdb.d/01-init-database.sql:ro

    networks:
      - stateful-agents-network

    restart: unless-stopped

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U golanggraph -d golanggraph_stateful"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # Redis for Session Management and Caching
  redis:
    image: redis:7.2-alpine
    container_name: golanggraph-redis
    ports:
      - "6379:6379"

    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro

    networks:
      - stateful-agents-network

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

    command: redis-server /usr/local/etc/redis/redis.conf

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: golanggraph-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"

    volumes:
      - qdrant_data:/qdrant/storage

    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334

    networks:
      - stateful-agents-network

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Prometheus for Metrics (Optional)
  prometheus:
    image: prom/prometheus:v2.48.1
    container_name: golanggraph-prometheus
    ports:
      - "9090:9090"

    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus

    networks:
      - stateful-agents-network

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

    profiles:
      - monitoring

  # Grafana for Monitoring Dashboard (Optional)
  grafana:
    image: grafana/grafana:10.2.2
    container_name: golanggraph-grafana
    ports:
      - "3000:3000"

    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro

    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false

    networks:
      - stateful-agents-network

    restart: unless-stopped

    depends_on:
      - prometheus

    profiles:
      - monitoring

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:1.25-alpine
    container_name: golanggraph-nginx
    ports:
      - "80:80"
      - "443:443"

    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro

    networks:
      - stateful-agents-network

    restart: unless-stopped

    depends_on:
      - golanggraph-stateful-agents

    profiles:
      - production

# Networks
networks:
  stateful-agents-network:
    driver: bridge
    name: golanggraph-stateful-network

# Volumes
volumes:
  postgres_data:
    driver: local
    name: golanggraph-postgres-data

  redis_data:
    driver: local
    name: golanggraph-redis-data

  qdrant_data:
    driver: local
    name: golanggraph-qdrant-data

  prometheus_data:
    driver: local
    name: golanggraph-prometheus-data

  grafana_data:
    driver: local
    name: golanggraph-grafana-data
