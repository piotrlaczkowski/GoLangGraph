# GoLangGraph Go-Agents-Simple Docker Compose
# Optimized for local development with host Ollama instance

services:
  # GoLangGraph Go-Agents-Simple Application
  go-agents-simple:
    build: .
    image: golanggraph/go-agents-simple:latest
    container_name: go-agents-simple
    ports:
      - "8080:8080"
    environment:
      # Connect to host machine's Ollama instance
      - OLLAMA_ENDPOINT=http://host.docker.internal:11434
      - PORT=8080
      - GIN_MODE=release
    extra_hosts:
      # Enable connection to host machine
      - "host.docker.internal:host-gateway"
    networks:
      - golanggraph-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.go-agents-simple.rule=Host(`localhost`)"
      - "traefik.http.services.go-agents-simple.loadbalancer.server.port=8080"

  # Redis for Session Management (Optional)
  redis:
    image: redis:7-alpine
    container_name: go-agents-redis
    ports:
      - "6380:6379"  # Changed to avoid conflict with local Redis
    volumes:
      - redis_data:/data
    networks:
      - golanggraph-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    profiles:
      - full  # Only start with --profile full

  # Prometheus for Metrics (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: go-agents-prometheus
    ports:
      - "9091:9090"  # Changed to avoid conflict
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/grafana/alerting.yml:/etc/prometheus/alerting.yml:ro
      - prometheus_data:/prometheus
    networks:
      - golanggraph-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring  # Only start with --profile monitoring

  # Grafana for Visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: go-agents-grafana
    ports:
      - "3001:3000"  # Changed to avoid conflict
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - ./monitoring/grafana/provisioning/dashboards.yml:/etc/grafana/provisioning/dashboard_providers/dashboards.yml:ro
      - ./monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini:ro
    networks:
      - golanggraph-network
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/provisioning/dashboards/go-agents-overview.json
    depends_on:
      - prometheus
    profiles:
      - monitoring  # Only start with --profile monitoring

networks:
  golanggraph-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
