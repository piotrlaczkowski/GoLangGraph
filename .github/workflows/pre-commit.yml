name: Pre-commit

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GO_VERSION: '1.23'

jobs:
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/.pre-commit-config.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Cache pre-commit
      uses: actions/cache@v4
      with:
        path: ~/.cache/pre-commit
        key: ${{ runner.os }}-pre-commit-${{ hashFiles('**/.pre-commit-config.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pre-commit-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
        go mod download
        go mod tidy

    - name: Run pre-commit
      uses: pre-commit/action@v3.0.1

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        go mod download
        go mod tidy

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securego/gosec/v2/cmd/gosec@latest
        gosec -no-fail -fmt sarif -out gosec-results.sarif ./...

    - name: Upload Gosec SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: gosec-results.sarif
        category: gosec

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy SARIF file
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: trivy-results.sarif
        category: trivy

    - name: Run detect-secrets
      run: |
        pip install detect-secrets
        # Create baseline if it doesn't exist
        if [ ! -f .secrets.baseline ]; then
          detect-secrets scan --all-files --baseline .secrets.baseline || true
        fi
        # Run scan and audit
        detect-secrets scan --all-files --baseline .secrets.baseline --update || true
        if [ -f .secrets.baseline ]; then
          detect-secrets audit .secrets.baseline --report --fail-on-unaudited || echo "Secrets audit completed"
        fi

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        go mod download
        go mod tidy

    - name: Check for vulnerabilities
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Check for outdated dependencies
      run: |
        go list -u -m all

    - name: Verify dependencies
      run: |
        go mod verify

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        go mod download
        go mod tidy

    - name: Install quality tools
      run: |
        go install github.com/fzipp/gocyclo/cmd/gocyclo@latest
        go install github.com/gordonklaus/ineffassign@latest
        go install github.com/client9/misspell/cmd/misspell@latest

    - name: Check cyclomatic complexity
      run: |
        gocyclo -over 15 ./pkg/... || echo "High complexity detected"

    - name: Check for inefficient assignments
      run: |
        ineffassign ./pkg/... || echo "Inefficient assignments detected"

    - name: Check for misspellings
      run: |
        misspell -error ./pkg/... ./docs/... ./README.md || echo "Misspellings detected"

    - name: Generate quality report
      run: |
        echo "## Code Quality Report" > quality-report.md
        echo "" >> quality-report.md
        echo "### Cyclomatic Complexity" >> quality-report.md
        gocyclo -avg ./pkg/... >> quality-report.md || true
        echo "" >> quality-report.md
        echo "### Inefficient Assignments" >> quality-report.md
        ineffassign ./pkg/... >> quality-report.md || true
        echo "" >> quality-report.md
        echo "### Misspellings" >> quality-report.md
        misspell ./pkg/... ./docs/... ./README.md >> quality-report.md || true

    - name: Upload quality report
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-report
        path: quality-report.md
        retention-days: 7
